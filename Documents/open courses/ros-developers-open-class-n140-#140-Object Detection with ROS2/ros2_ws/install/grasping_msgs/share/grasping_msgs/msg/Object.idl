// generated from rosidl_adapter/resource/msg.idl.em
// with input from grasping_msgs/msg/Object.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Pose.idl"
#include "grasping_msgs/msg/ObjectProperty.idl"
#include "sensor_msgs/msg/PointCloud2.idl"
#include "shape_msgs/msg/Mesh.idl"
#include "shape_msgs/msg/Plane.idl"
#include "shape_msgs/msg/SolidPrimitive.idl"
#include "std_msgs/msg/Header.idl"

module grasping_msgs {
  module msg {
    @verbatim (language="comment", text=
      "##########################################################" "\n"
      " This message describes an object.")
    struct Object {
      @verbatim (language="comment", text=
        " Many of the geometric items below lack a stamp/frame_id," "\n"
        " header stamp/frame_id should be used there")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        " An object might have a name")
      string name;

      @verbatim (language="comment", text=
        " An object might have a known (named) support surface")
      string support_surface;

      @verbatim (language="comment", text=
        " Objects might have properties, such as type/class, or color, etc.")
      sequence<grasping_msgs::msg::ObjectProperty> properties;

      @verbatim (language="comment", text=
        "##########################################################" "\n"
        " Objects have many possible descriptions" "\n"
        "  The following are the possible description formats" "\n"
        " Perception modules often represent an object as a cluster of points" "\n"
        "  Is considered valid if number of points > 0")
      sensor_msgs::msg::PointCloud2 point_cluster;

      @verbatim (language="comment", text=
        " MoveIt prefers solid primitives or meshes as a description of objects")
      sequence<shape_msgs::msg::SolidPrimitive> primitives;

      sequence<geometry_msgs::msg::Pose> primitive_poses;

      sequence<shape_msgs::msg::Mesh> meshes;

      sequence<geometry_msgs::msg::Pose> mesh_poses;

      @verbatim (language="comment", text=
        " An object representing a support surface might be described by a plane" "\n"
        " Is considered valid if coefficients are not all 0s.")
      shape_msgs::msg::Plane surface;
    };
  };
};
